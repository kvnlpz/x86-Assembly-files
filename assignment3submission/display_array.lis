     1                                  
     2                                  ;Copyright (C) 2020 Kevin Lopez
     3                                  
     4                                  ;This program is free software; you can redistribute it and/or
     5                                  ;modify it under the terms of the GNU General Public License
     6                                  ;as published by the Free Software Foundation; either version 2
     7                                  ;of the License, or (at your option) any later version.
     8                                  
     9                                  ;This program is distributed in the hope that it will be useful,
    10                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of
    11                                  ;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    12                                  ;GNU General Public License for more details.
    13                                  
    14                                  
    15                                  ; Author: Kevin Lopez
    16                                  ; Email: Kevinlopez8554@csu.fullerton.edu
    17                                  ; Date of last update: 3/5/20
    18                                  ; System Requirements: A modern computer with linux, and an x86 processor
    19                                  ; Program title: Biggest Integer Finder 
    20                                  ; Program Description: This program receives a sequence of integers, then puts them into an array
    21                                  ;   Then the program prints out the array, then prints out the array. Afterwards, the program finds
    22                                  ;   the biggest number in the array and its index, then tells us what they are.
    23                                  ; 
    24                                  ; FILES: main.c 
    25                                  ;        manager.asm 
    26                                  ;        input_array.cpp 
    27                                  ;        display_array.asm <---- You are here.
    28                                  ;        find_biggest.asm 
    29                                  ;        run.sh
    30                                  
    31                                  ; File Purpose: This file is in charge of displaying whatever array is passed into it
    32                                  
    33                                      extern printf                                        ; External / global funtions.
    34                                      extern scanf
    35                                      global display_array
    36                                      
    37                                  
    38                                  segment .data                                            ; Initialized data.
    39 00000000 200A00                      msg             db " "  ,  10, 0 
    40 00000003 256C660A00                  floatIOFormat   db "%lf" ,  10, 0                     ; Formating.
    41 00000008 257300                      stringformat    db "%s" ,      0
    42 0000000B 256C640A00                  dmlIOFormat     db "%ld",  10, 0
    43 00000010 25692000                    integerformat   db "%i ",      0                     ; general decimal integer
    44                                  
    45                                  segment .bss                                             ; Un-initialized data.
    46                                  segment .text                                            ; Start of executable instructions.
    47                                  
    48                                  display_array:                                           ; Entry point.
    49                                  ; ********************************************************************************************************
    50 00000000 55                          push rbp                                             ; Back-up registers.
    51 00000001 4889E5                      mov rbp, rsp
    52 00000004 53                          push rbx
    53 00000005 51                          push rcx
    54 00000006 52                          push rdx
    55 00000007 56                          push rsi
    56 00000008 57                          push rdi
    57 00000009 4150                        push r8
    58 0000000B 4151                        push r9
    59 0000000D 4152                        push r10
    60 0000000F 4153                        push r11
    61 00000011 4154                        push r12
    62 00000013 4155                        push r13
    63 00000015 4156                        push r14
    64 00000017 4157                        push r15
    65 00000019 9C                          pushf
    66                                  ; ********************************************************************************************************
    67                                  
    68 0000001A 4989FE                      mov r14, rdi                                         ; backing up our array into r14
    69                                  
    70 0000001D 4989F5                      mov r13, rsi                                         ; baking up our array size into r13
    71                                  
    72                                  start_loop:                                              ; Iterate through array
    73                                  
    74 00000020 4983FD00                    cmp r13, 0                                           ; (arraySize == 0)
    75 00000024 7422                        je loopComplete                                      ; --> Jump if true.
    76                                      ; mov qword rax, 0                                            
    77 00000026 F2410F1006                  movsd xmm0, [r14]
    78                                     ; cvtsd2ss xmm0, xmm0
    79 0000002B 48BF-                       mov rdi, floatIOFormat                               ; passing in the format to use
    79 0000002D [0300000000000000] 
    80 00000035 B801000000                  mov rax, 1                                       ; passing in our array index
    81 0000003A E8(00000000)                call printf  
    82                                  
    83                                  
    84 0000003F 49FFCD                      dec r13                                              ; Decrement the loop/array index counter.
    85 00000042 4983C608                    add r14, 8                                           ;  Add current array value to r8.
    86 00000046 EBD8                        jmp start_loop                                       ; Jump to the top of this loop.
    87                                  
    88                                  loopComplete:
    89                                  
    90 00000048 48BF-                       mov rdi, stringformat
    90 0000004A [0800000000000000] 
    91 00000052 48BE-                       mov rsi, msg
    91 00000054 [0000000000000000] 
    92 0000005C E8(00000000)                call printf
    93                                  
    94                                  ; ********************************************************************************************************
    95 00000061 9D                          popf                                                 ; Restore registers.
    96 00000062 415F                        pop r15
    97 00000064 415E                        pop r14
    98 00000066 415D                        pop r13
    99 00000068 415C                        pop r12
   100 0000006A 415B                        pop r11
   101 0000006C 415A                        pop r10
   102 0000006E 4159                        pop r9
   103 00000070 4158                        pop r8
   104 00000072 5F                          pop rdi
   105 00000073 5E                          pop rsi
   106 00000074 5A                          pop rdx
   107 00000075 59                          pop rcx
   108 00000076 5B                          pop rbx
   109 00000077 5D                          pop rbp
   110                                  
   111                                  ; ********************************************************************************************************
   112                                      
   113 00000078 C3                          ret                                                  ; Return to calling funtion.
