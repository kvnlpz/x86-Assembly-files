     1                                  
     2                                  ;Copyright (C) 2020 Kevin Lopez
     3                                  
     4                                  ;This program is free software; you can redistribute it and/or
     5                                  ;modify it under the terms of the GNU General Public License
     6                                  ;as published by the Free Software Foundation; either version 2
     7                                  ;of the License, or (at your option) any later version.
     8                                  
     9                                  ;This program is distributed in the hope that it will be useful,
    10                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of
    11                                  ;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    12                                  ;GNU General Public License for more details.
    13                                  
    14                                  
    15                                  ; Author: Kevin Lopez
    16                                  ; Email: Kevinlopez8554@csu.fullerton.edu
    17                                  ; Date of last update: 3/5/20
    18                                  ; System Requirements: A modern computer with linux, and an x86 processor
    19                                  ; Program title: Biggest Integer Finder 
    20                                  ; Program Description: This program receives a sequence of integers, then puts them into an array
    21                                  ;   Then the program then prints out the array. Afterwards, the program finds
    22                                  ;   the biggest number in the array and its index, then tells us what they are.
    23                                  ; 
    24                                  ; FILES: main.c 
    25                                  ;        manager.asm 
    26                                  ;        input_array.cpp 
    27                                  ;        display_array.asm 
    28                                  ;        find_biggest.asm <---- You are here.
    29                                  ;        run.sh
    30                                  
    31                                  ; File Purpose: This file is in charge of finding the biggest value of any array that gets passed into it. It returns the biggest value, and the size of the index.
    32                                  ; They are both returned by putting those two values into an index of size 2. That array gets sent back to the manager file.
    33                                  
    34                                      extern printf                                       ; External / global funtions.
    35                                      extern scanf
    36                                      global find_biggest
    37                                  
    38                                  segment .data                                           ; Initialized data.
    39 00000000 546865206C61726765-         msg                 db "The largest value ", 0 
    39 00000009 73742076616C756520-
    39 00000012 00                 
    40 00000013 257300                      stringformat        db "%s", 0
    41 00000016 25692000                    integerformat       db "%i ", 0                     ; general decimal integer
    42 0000001A 686173206265656E20-         indexPrint          db "has been found at index %i", 10, 10, 0
    42 00000023 666F756E6420617420-
    42 0000002C 696E6465782025690A-
    42 00000035 0A00               
    43                                  
    44                                  
    45                                  segment .bss                                            ; Un-initialized data.
    46                                  
    47 00000000 <res 00000010>              returnArray resq 2                                  ; This is the array we are returning
    48                                  
    49                                  segment .text                                           ; Start of executable instructions.
    50                                  
    51                                  find_biggest:                                           ; Entry point.
    52                                  ; ****************************************************************************************
    53 00000000 55                          push rbp                                            ; Back-up registers.
    54 00000001 4889E5                      mov rbp, rsp
    55 00000004 53                          push rbx
    56 00000005 51                          push rcx
    57 00000006 52                          push rdx
    58 00000007 56                          push rsi
    59 00000008 57                          push rdi
    60 00000009 4150                        push r8
    61 0000000B 4151                        push r9
    62 0000000D 4152                        push r10
    63 0000000F 4153                        push r11
    64 00000011 4154                        push r12
    65 00000013 4155                        push r13
    66 00000015 4156                        push r14
    67 00000017 4157                        push r15
    68 00000019 9C                          pushf
    69                                  ; ****************************************************************************************
    70                                  
    71 0000001A 4989FE                  mov r14, rdi                                         ; backing up the array into r14
    72 0000001D 4989F5                  mov r13, rsi 
    73                                  
    74 00000020 41BC00000000            mov r12, 0
    75 00000026 F2450F1036              movsd xmm14, [r14]
    76 0000002B F2410F1006              movsd xmm0, [r14]
    77                                  
    78                                  start:
    79 00000030 4D39EC                  cmp r12, r13            ;cmpare r12(counter) with size
    80 00000033 7420                    je final
    81                                  
    82 00000035 49FFC4                  inc r12
    83                                  
    84 00000038 F2470F103CE6            movsd xmm15, [r14+r12*8]
    85 0000003E 66450F2EF7              ucomisd xmm14, xmm15
    86 00000043 7709                    ja next
    87 00000045 EBE9                    jmp start
    88                                  
    89 00000047 F2450F10F7              movsd xmm14, xmm15
    90 0000004C EBE2                    jmp start
    91                                  
    92                                  
    93                                  next: 
    94 0000004E F2450F10F6              movsd xmm14, xmm14
    95 00000053 EBDB                    jmp start
    96                                  
    97                                  final:
    98 00000055 F2410F10C6              movsd xmm0, xmm14
    99                                  
   100                                  ; ****************************************************************************************
   101 0000005A 9D                          popf                                                 ; Restore registers.
   102 0000005B 415F                        pop r15
   103 0000005D 415E                        pop r14
   104 0000005F 415D                        pop r13
   105 00000061 415C                        pop r12
   106 00000063 415B                        pop r11
   107 00000065 415A                        pop r10
   108 00000067 4159                        pop r9
   109 00000069 4158                        pop r8
   110 0000006B 5F                          pop rdi
   111 0000006C 5E                          pop rsi
   112 0000006D 5A                          pop rdx
   113 0000006E 59                          pop rcx
   114 0000006F 5B                          pop rbx
   115 00000070 5D                          pop rbp
   116                                  
   117                                  ; ********************************************
   118                                      
   119 00000071 C3                          ret                                                  ; Return to calling funtion.
